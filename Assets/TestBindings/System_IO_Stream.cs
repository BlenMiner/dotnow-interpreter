//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System.IO.Generated
{
    
    // Generated from type: System.IO.Stream, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    // Generated from assembly: C:\Program Files\Unity\Hub\Editor\2020.1.0\Editor\Data\MonoBleedingEdge\lib\mono\unityjit\mscorlib.dll
    [dotnow.CLRProxyBindingAttribute(typeof(System.IO.Stream))]
    public class Stream_ProxyBinding : System.IO.Stream, dotnow.Interop.ICLRProxy
    {
        private dotnow.AppDomain appDomain;
        private dotnow.CLRInstance instance;
        private System.Reflection.MethodBase clrTarget_get_CanRead;
        private System.Reflection.MethodBase clrTarget_get_CanSeek;
        private System.Reflection.MethodBase clrTarget_get_CanTimeout;
        private System.Reflection.MethodBase clrTarget_get_CanWrite;
        private System.Reflection.MethodBase clrTarget_get_Length;
        private System.Reflection.MethodBase clrTarget_get_Position;
        private System.Reflection.MethodBase clrTarget_set_Position;
        private System.Reflection.MethodBase clrTarget_get_ReadTimeout;
        private System.Reflection.MethodBase clrTarget_set_ReadTimeout;
        private System.Reflection.MethodBase clrTarget_get_WriteTimeout;
        private System.Reflection.MethodBase clrTarget_set_WriteTimeout;
        private System.Reflection.MethodBase clrTarget_CopyToAsync;
        private System.Reflection.MethodBase clrTarget_CopyTo;
        private System.Reflection.MethodBase clrTarget_Close;
        private System.Reflection.MethodBase clrTarget_Dispose;
        private System.Reflection.MethodBase clrTarget_Flush;
        private System.Reflection.MethodBase clrTarget_FlushAsync;
        private System.Reflection.MethodBase clrTarget_BeginRead;
        private System.Reflection.MethodBase clrTarget_EndRead;
        private System.Reflection.MethodBase clrTarget_ReadAsync;
        private System.Reflection.MethodBase clrTarget_BeginWrite;
        private System.Reflection.MethodBase clrTarget_EndWrite;
        private System.Reflection.MethodBase clrTarget_WriteAsync;
        private System.Reflection.MethodBase clrTarget_Seek;
        private System.Reflection.MethodBase clrTarget_SetLength;
        private System.Reflection.MethodBase clrTarget_Read;
        private System.Reflection.MethodBase clrTarget_ReadByte;
        private System.Reflection.MethodBase clrTarget_Write;
        private System.Reflection.MethodBase clrTarget_WriteByte;
        private System.Reflection.MethodBase clrTarget_Read;
        private System.Reflection.MethodBase clrTarget_Write;
        private System.Reflection.MethodBase clrTarget_ReadAsync;
        private System.Reflection.MethodBase clrTarget_WriteAsync;
        private System.Reflection.MethodBase clrTarget_CreateObjRef;
        private System.Reflection.MethodBase clrTarget_GetLifetimeService;
        private System.Reflection.MethodBase clrTarget_InitializeLifetimeService;
        public void InitializeProxy(dotnow.AppDomain domain, dotnow.CLRInstance instance)
        {
            this.appDomain = domain;
            this.instance = instance;
        }
        public override bool get_CanRead()
        {
            if ((this.clrTarget_get_CanRead == null))
            {
                this.clrTarget_get_CanRead = this.instance.Type.GetMethod("get_CanRead");
            }
            return ((bool)(this.clrTarget_get_CanRead.Invoke(this.instance, new object[0])));
        }
        public override bool get_CanSeek()
        {
            if ((this.clrTarget_get_CanSeek == null))
            {
                this.clrTarget_get_CanSeek = this.instance.Type.GetMethod("get_CanSeek");
            }
            return ((bool)(this.clrTarget_get_CanSeek.Invoke(this.instance, new object[0])));
        }
        public override bool get_CanTimeout()
        {
            if ((this.clrTarget_get_CanTimeout == null))
            {
                this.clrTarget_get_CanTimeout = this.instance.Type.GetMethod("get_CanTimeout");
            }
            return ((bool)(this.clrTarget_get_CanTimeout.Invoke(this.instance, new object[0])));
        }
        public override bool get_CanWrite()
        {
            if ((this.clrTarget_get_CanWrite == null))
            {
                this.clrTarget_get_CanWrite = this.instance.Type.GetMethod("get_CanWrite");
            }
            return ((bool)(this.clrTarget_get_CanWrite.Invoke(this.instance, new object[0])));
        }
        public override long get_Length()
        {
            if ((this.clrTarget_get_Length == null))
            {
                this.clrTarget_get_Length = this.instance.Type.GetMethod("get_Length");
            }
            return ((long)(this.clrTarget_get_Length.Invoke(this.instance, new object[0])));
        }
        public override long get_Position()
        {
            if ((this.clrTarget_get_Position == null))
            {
                this.clrTarget_get_Position = this.instance.Type.GetMethod("get_Position");
            }
            return ((long)(this.clrTarget_get_Position.Invoke(this.instance, new object[0])));
        }
        public override void set_Position(long value)
        {
            if ((this.clrTarget_set_Position == null))
            {
                this.clrTarget_set_Position = this.instance.Type.GetMethod("set_Position");
            }
            this.clrTarget_set_Position.Invoke(this.instance, new object[] {
                        value});
        }
        public override int get_ReadTimeout()
        {
            if ((this.clrTarget_get_ReadTimeout == null))
            {
                this.clrTarget_get_ReadTimeout = this.instance.Type.GetMethod("get_ReadTimeout");
            }
            return ((int)(this.clrTarget_get_ReadTimeout.Invoke(this.instance, new object[0])));
        }
        public override void set_ReadTimeout(int value)
        {
            if ((this.clrTarget_set_ReadTimeout == null))
            {
                this.clrTarget_set_ReadTimeout = this.instance.Type.GetMethod("set_ReadTimeout");
            }
            this.clrTarget_set_ReadTimeout.Invoke(this.instance, new object[] {
                        value});
        }
        public override int get_WriteTimeout()
        {
            if ((this.clrTarget_get_WriteTimeout == null))
            {
                this.clrTarget_get_WriteTimeout = this.instance.Type.GetMethod("get_WriteTimeout");
            }
            return ((int)(this.clrTarget_get_WriteTimeout.Invoke(this.instance, new object[0])));
        }
        public override void set_WriteTimeout(int value)
        {
            if ((this.clrTarget_set_WriteTimeout == null))
            {
                this.clrTarget_set_WriteTimeout = this.instance.Type.GetMethod("set_WriteTimeout");
            }
            this.clrTarget_set_WriteTimeout.Invoke(this.instance, new object[] {
                        value});
        }
        public override System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination, int bufferSize, System.Threading.CancellationToken cancellationToken)
        {
            if ((this.clrTarget_CopyToAsync == null))
            {
                this.clrTarget_CopyToAsync = this.instance.Type.GetMethod("CopyToAsync");
            }
            return ((System.Threading.Tasks.Task)(this.clrTarget_CopyToAsync.Invoke(this.instance, new object[] {
                        destination,
                        bufferSize,
                        cancellationToken})));
        }
        public override void CopyTo(System.IO.Stream destination, int bufferSize)
        {
            if ((this.clrTarget_CopyTo == null))
            {
                this.clrTarget_CopyTo = this.instance.Type.GetMethod("CopyTo");
            }
            this.clrTarget_CopyTo.Invoke(this.instance, new object[] {
                        destination,
                        bufferSize});
        }
        public override void Close()
        {
            if ((this.clrTarget_Close == null))
            {
                this.clrTarget_Close = this.instance.Type.GetMethod("Close");
            }
            this.clrTarget_Close.Invoke(this.instance, new object[0]);
        }
        public override void Dispose()
        {
            if ((this.clrTarget_Dispose == null))
            {
                this.clrTarget_Dispose = this.instance.Type.GetMethod("Dispose");
            }
            this.clrTarget_Dispose.Invoke(this.instance, new object[0]);
        }
        public override void Flush()
        {
            if ((this.clrTarget_Flush == null))
            {
                this.clrTarget_Flush = this.instance.Type.GetMethod("Flush");
            }
            this.clrTarget_Flush.Invoke(this.instance, new object[0]);
        }
        public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken)
        {
            if ((this.clrTarget_FlushAsync == null))
            {
                this.clrTarget_FlushAsync = this.instance.Type.GetMethod("FlushAsync");
            }
            return ((System.Threading.Tasks.Task)(this.clrTarget_FlushAsync.Invoke(this.instance, new object[] {
                        cancellationToken})));
        }
        public override System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state)
        {
            if ((this.clrTarget_BeginRead == null))
            {
                this.clrTarget_BeginRead = this.instance.Type.GetMethod("BeginRead");
            }
            return ((System.IAsyncResult)(this.clrTarget_BeginRead.Invoke(this.instance, new object[] {
                        buffer,
                        offset,
                        count,
                        callback,
                        state})));
        }
        public override int EndRead(System.IAsyncResult asyncResult)
        {
            if ((this.clrTarget_EndRead == null))
            {
                this.clrTarget_EndRead = this.instance.Type.GetMethod("EndRead");
            }
            return ((int)(this.clrTarget_EndRead.Invoke(this.instance, new object[] {
                        asyncResult})));
        }
        public override System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken)
        {
            if ((this.clrTarget_ReadAsync == null))
            {
                this.clrTarget_ReadAsync = this.instance.Type.GetMethod("ReadAsync");
            }
            return ((System.Threading.Tasks.Task<int>)(this.clrTarget_ReadAsync.Invoke(this.instance, new object[] {
                        buffer,
                        offset,
                        count,
                        cancellationToken})));
        }
        public override System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state)
        {
            if ((this.clrTarget_BeginWrite == null))
            {
                this.clrTarget_BeginWrite = this.instance.Type.GetMethod("BeginWrite");
            }
            return ((System.IAsyncResult)(this.clrTarget_BeginWrite.Invoke(this.instance, new object[] {
                        buffer,
                        offset,
                        count,
                        callback,
                        state})));
        }
        public override void EndWrite(System.IAsyncResult asyncResult)
        {
            if ((this.clrTarget_EndWrite == null))
            {
                this.clrTarget_EndWrite = this.instance.Type.GetMethod("EndWrite");
            }
            this.clrTarget_EndWrite.Invoke(this.instance, new object[] {
                        asyncResult});
        }
        public override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken)
        {
            if ((this.clrTarget_WriteAsync == null))
            {
                this.clrTarget_WriteAsync = this.instance.Type.GetMethod("WriteAsync");
            }
            return ((System.Threading.Tasks.Task)(this.clrTarget_WriteAsync.Invoke(this.instance, new object[] {
                        buffer,
                        offset,
                        count,
                        cancellationToken})));
        }
        public override long Seek(long offset, System.IO.SeekOrigin origin)
        {
            if ((this.clrTarget_Seek == null))
            {
                this.clrTarget_Seek = this.instance.Type.GetMethod("Seek");
            }
            return ((long)(this.clrTarget_Seek.Invoke(this.instance, new object[] {
                        offset,
                        origin})));
        }
        public override void SetLength(long value)
        {
            if ((this.clrTarget_SetLength == null))
            {
                this.clrTarget_SetLength = this.instance.Type.GetMethod("SetLength");
            }
            this.clrTarget_SetLength.Invoke(this.instance, new object[] {
                        value});
        }
        public override int Read([System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.OutAttribute()] byte[] buffer, int offset, int count)
        {
            if ((this.clrTarget_Read == null))
            {
                this.clrTarget_Read = this.instance.Type.GetMethod("Read");
            }
            return ((int)(this.clrTarget_Read.Invoke(this.instance, new object[] {
                        buffer,
                        offset,
                        count})));
        }
        public override int ReadByte()
        {
            if ((this.clrTarget_ReadByte == null))
            {
                this.clrTarget_ReadByte = this.instance.Type.GetMethod("ReadByte");
            }
            return ((int)(this.clrTarget_ReadByte.Invoke(this.instance, new object[0])));
        }
        public override void Write(byte[] buffer, int offset, int count)
        {
            if ((this.clrTarget_Write == null))
            {
                this.clrTarget_Write = this.instance.Type.GetMethod("Write");
            }
            this.clrTarget_Write.Invoke(this.instance, new object[] {
                        buffer,
                        offset,
                        count});
        }
        public override void WriteByte(byte value)
        {
            if ((this.clrTarget_WriteByte == null))
            {
                this.clrTarget_WriteByte = this.instance.Type.GetMethod("WriteByte");
            }
            this.clrTarget_WriteByte.Invoke(this.instance, new object[] {
                        value});
        }
        public override int Read(System.Span<byte> destination)
        {
            if ((this.clrTarget_Read == null))
            {
                this.clrTarget_Read = this.instance.Type.GetMethod("Read");
            }
            return ((int)(this.clrTarget_Read.Invoke(this.instance, new object[] {
                        destination})));
        }
        public override void Write(System.ReadOnlySpan<byte> source)
        {
            if ((this.clrTarget_Write == null))
            {
                this.clrTarget_Write = this.instance.Type.GetMethod("Write");
            }
            this.clrTarget_Write.Invoke(this.instance, new object[] {
                        source});
        }
        public override System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> destination, System.Threading.CancellationToken cancellationToken)
        {
            if ((this.clrTarget_ReadAsync == null))
            {
                this.clrTarget_ReadAsync = this.instance.Type.GetMethod("ReadAsync");
            }
            return ((System.Threading.Tasks.ValueTask<int>)(this.clrTarget_ReadAsync.Invoke(this.instance, new object[] {
                        destination,
                        cancellationToken})));
        }
        public override System.Threading.Tasks.Task WriteAsync(System.ReadOnlyMemory<byte> source, System.Threading.CancellationToken cancellationToken)
        {
            if ((this.clrTarget_WriteAsync == null))
            {
                this.clrTarget_WriteAsync = this.instance.Type.GetMethod("WriteAsync");
            }
            return ((System.Threading.Tasks.Task)(this.clrTarget_WriteAsync.Invoke(this.instance, new object[] {
                        source,
                        cancellationToken})));
        }
        public override System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType)
        {
            if ((this.clrTarget_CreateObjRef == null))
            {
                this.clrTarget_CreateObjRef = this.instance.Type.GetMethod("CreateObjRef");
            }
            return ((System.Runtime.Remoting.ObjRef)(this.clrTarget_CreateObjRef.Invoke(this.instance, new object[] {
                        requestedType})));
        }
        public override object GetLifetimeService()
        {
            if ((this.clrTarget_GetLifetimeService == null))
            {
                this.clrTarget_GetLifetimeService = this.instance.Type.GetMethod("GetLifetimeService");
            }
            return ((object)(this.clrTarget_GetLifetimeService.Invoke(this.instance, new object[0])));
        }
        public override object InitializeLifetimeService()
        {
            if ((this.clrTarget_InitializeLifetimeService == null))
            {
                this.clrTarget_InitializeLifetimeService = this.instance.Type.GetMethod("InitializeLifetimeService");
            }
            return ((object)(this.clrTarget_InitializeLifetimeService.Invoke(this.instance, new object[0])));
        }
    }
}
